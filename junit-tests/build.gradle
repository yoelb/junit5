apply plugin: 'jacoco'
apply plugin: 'org.junit.gen5.gradle'

uploadArchives.enabled = false

junit5 {
	// version '5.0.0-SNAPSHOT' // not needed since all dependencies are declared explicitly
	runJunit4 true
	matchClassName '.*Test[s]'
	reportFile file('build/test-results/JUNIT5-Tests.xml')
	// includeTag 'fast'
	excludeTag 'slow'
}

def testedProjects = [
	project(':junit-commons'),
	project(':junit-console'),
	project(':junit-engine-api'),
	project(':junit-launcher'),
	project(':junit4-engine'),
	project(':junit4-runner'),
	project(':junit5-api'),
	project(':junit5-engine')
]

dependencies {
	testedProjects.each { project ->
		testCompile(project)
	}

	testCompile("org.assertj:assertj-core:${assertJVersion}")
	testCompile("org.mockito:mockito-core:${mockitoVersion}")
	testCompile("de.schauderhaft.degraph:degraph-check:${degraphVersion}")

	testRuntime("org.apache.logging.log4j:log4j-core:${log4JVersion}")
	testRuntime("org.apache.logging.log4j:log4j-jul:${log4JVersion}")
}

// The JUnit5Plugin registers the junit5Test task *after* the project has
// been evaluated. We can therefore only configure the junit5Test task
// once it actually exists.
afterEvaluate {

	// Ensure that log4j2 is properly configured.
	junit5Test.systemProperty 'java.util.logging.manager', 'org.apache.logging.log4j.jul.LogManager'

	jacoco {
		toolVersion = '0.7.4.201502262128'
		applyTo junit5Test
	}

	task junit5CodeCoverageReport(type:JacocoReport){
		executionData junit5Test
		sourceSets sourceSets.main
		sourceDirectories = files()
		classDirectories = files()
		testedProjects.each { project ->
			sourceDirectories = files(sourceDirectories, project.sourceSets.main.allSource.srcDirs)
			classDirectories = files(classDirectories, project.sourceSets.main.output)
		}
		reports {
			xml.enabled = true
			html.enabled = true
		}
	}

}
